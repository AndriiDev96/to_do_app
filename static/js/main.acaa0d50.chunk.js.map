{"version":3,"sources":["components/startPage/UserName.js","components/editTask/EditTask.js","components/renderOneTask/RenderOneTask.js","components/addTask/AddTask.js","components/renderTasks/RenderTasks.js","components/shellApp/ShellApp.js","routes/RouteApp.js","App.js","serviceWorker.js","index.js"],"names":["Button","styled","button","_templateObject","Wrapper","div","_templateObject2","process","UserName","state","name","handleChange","event","_this","setState","target","value","handleClick","preventDefault","length","localStorage","setItem","concat","getName","getItem","userName","react_default","a","createElement","className","type","this","onChange","onClick","Link","to","Component","ButtonEdit","EditTask_templateObject","EditTask","show","task","stateModalWindow","handleSubmit","props","onSubmit","Fragment","src","alt","Modal","onHide","centered","Header","closeButton","Title","Body","rows","placeholder","Footer","RenderOneTask","dateAndTime","today","Date","date","getDate","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","markComplTaks","textDecoration","statusTask","color","complete","style","editTask_EditTask","editTask","deleteTask","AddTask_templateObject","AddTask","AddTask_Button","RenderTaks","listTasks","status","addNewTask","_ref","Object","toConsumableArray","indexTask","changedTask","map","index","completeTask","objectSpread","filter","_this2","countTasks","addTask_AddTask","taskFromList","renderOneTask_RenderOneTask","key","bind","SectionFon","section","ShellApp_templateObject","ShellApp_templateObject2","ShellApp","nameLocalSt","nameUser","ShellApp_Button","RenderTasks","customHistory","browserHistory","RouteApp","HashRouter","history","Route","exact","path","component","App","routes_RouteApp","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.acaa0d50.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport './style.css';\nimport { Link } from \"react-router-dom\";\n\nconst Button = styled.button`\n  display: block;\n  margin-top: 10px;\n  width: 120px;\n  height: 40px;\n  background-color: #0984e3;\n  color: #fff;\n  border: none;\n  font-weight: bold;\n`;\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 300px;\n  background: url(${process.env.PUBLIC_URL}/img/start_page/goluboy_fon.png);\n\n  @media screen and (max-width: 1025px) {\n    height: auto;\n    background: url(${process.env.PUBLIC_URL}/img/start_page/goluboy_fon_mobile.jpg);\n  }\n\n  @media screen and (max-width: 425px) {\n    min-height: 100%;\n  }\n`;\n\nclass UserName extends Component {\n  state = {\n    name: ''\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      name: event.target.value\n    })\n  };\n\n  handleClick = (event) => {\n    event.preventDefault();\n    if (this.state.name !== '' && this.state.name.length < 12) {\n      localStorage.setItem('name', `${this.state.name}`)\n\n      this.setState({\n        name: ''\n      });\n    }\n  };\n\n  render() {\n    const getName = localStorage.getItem('name');\n    const userName = getName === ' ' || getName === null ? \"User\" : getName;\n\n    return (\n      <div className=\"entrance-page\">\n        <Wrapper>\n          <div className=\"container flex-for-div h-100\">\n            <div className=\"discribin-text\">\n              <h1 className=\"pt-5 font-weight-bold text-uppercase\">A better to-do list app <br /> for work</h1>\n              <p>It is the easiest way for teams to plan,<br /> organize, and track their work.</p>\n            </div>\n            <div className=\"form\">\n              <div className=\"data-user\">\n                <div className=\"sing-on\">\n                  <h4>Your Name</h4>\n                  <input\n                    type=\"text\"\n                    value={this.state.name}\n                    onChange={this.handleChange}\n                  />\n                  <p>Do you want to continue as a {userName}?</p>\n                  <Button\n                    onClick={this.handleClick}>\n                    <Link to=\"/todo\" className=\"btn-todo\">GET STARTED</Link>\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default UserName;\n","import React, { Component } from 'react';\nimport { Modal } from 'react-bootstrap';\nimport './style.css';\nimport styled from 'styled-components';\n\nconst ButtonEdit = styled.button`\n  position: absolute;\n  right: 70px;\n  background: none;\n  border: none;\n  outline: none!important;\n\n  @media screen and (max-width: 500px) {\n    right: 55px;\n  }\n`;\n\nclass EditTask extends Component{\n\n  state = {\n    show: false,\n    task: ''\n  }\n\n  stateModalWindow = () => {\n    this.setState({\n      show: !this.state.show\n    })\n  }\n\n  handleChange = event => {\n    this.setState({\n      task: event.target.value\n    })\n  };\n\n  handleSubmit = () => {\n    this.setState({\n      task: \"\"\n    });\n    \n    if (this.state.task !== '') {\n      this.props.onSubmit({\n        task: this.state.task\n      });\n    }\n    this.stateModalWindow();\n  }\n\n  render(){  \n    return(\n      <>      \n        <ButtonEdit onClick={this.stateModalWindow}>\n          <img \n            src={process.env.PUBLIC_URL + '/img/edit_button/edit.png'} \n            alt=\"edit\"\n            className=\"button-edit\"\n            />\n        </ButtonEdit>\n\n        <Modal \n          show={this.state.show} \n          onHide={this.stateModalWindow} \n          centered>\n\n        <Modal.Header closeButton>\n          <Modal.Title>Edit Task</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <h5 className=\"mb-4 mt-2\">Write short and understandable.</h5>\n          <textarea \n            name=\"text\"\n            rows=\"1\"\n            placeholder=\"Click here\"\n            value={this.state.task}\n            onChange={this.handleChange}>\n          </textarea>\n        </Modal.Body>      \n\n        <Modal.Footer>\n          <button className=\"btn-cancel\" onClick={this.stateModalWindow}>Cancel</button>\n          <button className=\"btn-save\" onClick={this.handleSubmit}>Save</button>\n        </Modal.Footer>\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default EditTask;","import React, { Component } from 'react';\nimport './style.css';\nimport EditTask from '../editTask/EditTask';\n\nclass RenderOneTask extends Component {\n  state = {\n    dateAndTime: ''\n  }\n\n  componentDidMount() {\n    const today = new Date();\n    const date = today.getDate();\n    const month = today.getMonth();\n    const year = today.getFullYear();\n    const hours = today.getHours();\n    const minutes = today.getMinutes();\n    const seconds = today.getSeconds();\n\n    this.setState({\n      dateAndTime: `Date: ${date}.${month}.${year} Time: ${hours}.${minutes}.${seconds}`\n    })\n  }\n\n  render() {\n    const markComplTaks={\n      textDecoration: this.props.statusTask ? 'line-through' : void(0),\n      color: this.props.statusTask ? '#818181' : '#212529'\n    } \n\n    return (\n      <div className=\"task\">\n        <div className=\"mark-task\" onClick={this.props.complete}>  \n          {\n            this.props.statusTask ?\n              <img className=\"status-active\" src={process.env.PUBLIC_URL + '/img/check_mark/active.png'} alt=\"img\" />\n              :\n              <img className=\"status-unActive\" src={process.env.PUBLIC_URL + '/img/check_mark/noActive.png'} alt=\"img\" />\n          }\n        </div>\n        <p className=\"task-text\" style={markComplTaks}>\n          {this.props.task} <br />\n            <span className=\"data-and-time\">\n              {this.state.dateAndTime}\n            </span>\n        </p>\n\n        <EditTask onSubmit={this.props.editTask}/>\n\n        <button\n          className=\"btn-belete\"\n          onClick={this.props.deleteTask}>\n          Delete\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default RenderOneTask;","import React, { Component } from 'react';\nimport './style.css';\nimport styled from 'styled-components';\n\nconst Button = styled.button`\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  border: none;\n  color: white;\n  background-color: #070f85;\n  font-size: 32px;\n  outline: none!important;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n`;\n\nclass AddTask extends Component {\n  state = {\n    task: ''\n  }\n\n  handleChange = event => {\n    this.setState({\n      task: event.target.value\n    })\n  };\n\n  handleSubmit = () => {\n    this.setState({\n      task: \"\"\n    });\n    \n    if (this.state.task !== '') {\n      this.props.onSubmit({\n        task: this.state.task\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"input-addTask mb-4\">\n        <input\n          type=\"text\"\n          placeholder=\"Add new task\"\n          value={this.state.task}\n          onChange={this.handleChange}\n        />\n        <Button onClick={this.handleSubmit}>+</Button>\n      </div>\n    )\n  }\n}\n\nexport default AddTask;","import React, { Component } from 'react';\nimport RenderOneTask from '../renderOneTask/RenderOneTask';\nimport AddTask from '../addTask/AddTask';\n\nclass RenderTaks extends Component {\n\n  state = {\n    listTasks: [\n      {\n        'task': 'To buy a car.',\n        status: false\n      },\n      {\n        'task': 'Read a book.',\n        status: true\n      },\n    ],\n    task: '',\n  }\n\n  addNewTask = (task) => {\n    this.setState(({ listTasks }) => ({\n      listTasks: [...listTasks, task]\n    }));\n  };\n\n  editTask = (indexTask, changedTask) => {\n    this.setState(state => ({\n      listTasks: state.listTasks.map((task, index) =>\n        index === indexTask ? { task: changedTask.task, status: task.status }\n        : task\n      )\n    }));\n  };\n\n  completeTask = (indexTask) => {\n    this.setState(state => ({\n      listTasks: state.listTasks.map((task, index) =>\n        index === indexTask ? { ...task, status: !task.status }\n        : task\n      )\n    }));\n  };\n\n  deleteTask = (indexTask) => {\n    this.setState(state => ({\n      listTasks: state.listTasks.filter((task, index) => index !== indexTask)\n    }));\n  };\n\n  render() {\n\n    let countTasks = <div className=\"number-of-tasks mb-2\">Tasks: {this.state.listTasks.length}</div>\n\n    return (\n      <div>\n        <AddTask onSubmit={this.addNewTask} />\n\n        {countTasks}\n\n        <div className=\"class-list\">\n          {this.state.listTasks.map((taskFromList, index) => {\n            return <RenderOneTask\n              key={index}\n              task={taskFromList.task}\n              complete={this.completeTask.bind(this, index)}\n              statusTask={taskFromList.status}\n              deleteTask={this.deleteTask.bind(this, index)}\n              editTask={this.editTask.bind(this, index)}\n            />\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default RenderTaks;\n","import React, { Component } from 'react';\nimport './style.css';\nimport RenderTaks from '../renderTasks/RenderTasks';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nconst SectionFon = styled.section`\n  height: 180px;\n  width: 100%;\n  margin-bottom: 15px;\n  background: url(${process.env.PUBLIC_URL}/img/app_top.png) no-repeat;\n  background-size: cover;\n  color: white;\n  box-shadow: 0 7px 7px -6px #111;\n`;\n\nconst Button = styled.button`\n  background: none;\n  border: none;\n  padding: 10px 15px;\n  outline: none!important;\n`;\n\nclass ShellApp extends Component {\n  render() {\n    const nameLocalSt = localStorage.getItem('name');\n    const nameUser = nameLocalSt === ' ' || nameLocalSt === null ? \"User\" : nameLocalSt;\n\n    return (\n      <div className=\"wrapper-sections\">\n        <SectionFon>\n          <Link to=\"/\">\n            <Button>\n              <img src={process.env.PUBLIC_URL + '/img/img_button/left-arrow.png'} alt=\"back\"/>\n            </Button>\n          </Link>\n          <div className=\"container\">\n            <h2 className=\"greeting\">Hello {nameUser}!</h2>\n            <p>Be successful! To arrange your tasks.</p>\n          </div>\n        </SectionFon>\n        <section className=\"block-content mb-5\">\n          <div className=\"container\">\n            <RenderTaks />\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default ShellApp;\n","import React from 'react';\nimport UserName from '../components/startPage/UserName';\nimport ShellApp from '../components/shellApp/ShellApp';\nimport { HashRouter, Route} from 'react-router-dom'; \nimport browserHistory from 'history/createBrowserHistory';\n\nconst customHistory = browserHistory();\n\nconst RouteApp = () => {\n  return (\n    <HashRouter history={customHistory}>\n    <>\n      {/* Write button to the main page */}\n      <Route exact path=\"/\" component={UserName} />\n      <Route path=\"/todo\" component={ShellApp} />\n    </>\n    </HashRouter>\n  );\n}\n\nexport default RouteApp;","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport RouteApp from './routes/RouteApp';\n\nclass App extends Component {\n  render() {\n    return (\n      <RouteApp />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}